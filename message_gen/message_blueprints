#this is a comment
#The files generated from this file get dropped into the following places:
# PYTHON
#    `/messages/` contains all message.py classes, and
#    `MessageDeserializer.py` which has the translation table.
#    `/msg_codes.py` which has the actual ints for each message type
#    Drop all of these guys into nebula, s.t. .../out === .../nebula
# JAVASCRIPT: TODO
# drop the generated /out/js/messages.js into static? I think?
# I just comment out the TODO messages for now. JS won't need to be creating
#   them for all i know.


################################################################################
# Messages
################################################################################

0   , NEW_HOST              , string:ipv6, int:port     , int:wsport    , string:hostname
1   , ASSIGN_HOST_ID        , int:id    , string:key    , string:cert
2   , HOST_HANDSHAKE        , int:id    , string:ipv6   , int:port      , int:wsport    , update , string:hostname

3   , REMOTE_HANDSHAKE      , int:id    , string:key    , string:cert
4   , REM_HANDSHAKE_GO_FETCH #todo not done

5   , REQUEST_CLOUD         , int:id    , string:cname  , string:uname  , string:passw
6   , GO_RETRIEVE_HERE      , int:id    , ip            , int:port # note: purposefully no wsport, this is for H->H only.

7   , PREPARE_FOR_FETCH     , int:id    , string:cname  , ip
8   , HOST_HOST_FETCH       , int:id    , string:cname  , string:root
9   , HOST_FILE_TRANSFER    , int:id    , string:cname  , string:fpath, int:fsize, bool:isdir

10  , MAKE_CLOUD_REQUEST #todo not done
11  , MAKE_CLOUD_RESPONSE #todo not done

12  , MAKE_USER_REQUEST #todo not done
13  , MAKE_USER_RESPONSE #todo not done

14  , MIRRORING_COMPLETE    , int:id    , string:cname

15  , GET_HOSTS_REQUEST     , int:id    , string:cname

# 16 GHRp - Manual

#17  , COME_FETCH #still left here for some reason. Dunno really why. cause I was dumb?

18  , REMOVE_FILE           , int:id    , string:cname  , string:fpath
19  , HOST_FILE_PUSH        , int:tid   , string:cname  , string:fpath # target id? I don't remember....

20  , STAT_FILE_REQUEST     , sid       , string:cname  , string:fpath

# 21 SFRp - Manual
22  , LIST_FILES_REQUEST    , sid       , string:cname, string:fpath

# 23 LFRp - Manual

24  , READ_FILE_REQUEST     , sid       , string:cname, string:fpath
25  , READ_FILE_RESPONSE    , sid       , string:fpath, int:fsize #todo not done

26  , CLIENT_SESSION_REQUEST    , string:uname  , string:passw
27  , CLIENT_SESSION_ALERT      , sid           , int:uid       ,  ip
28  , CLIENT_SESSION_RESPONSE   , sid

29  , CLIENT_FILE_PUT           , sid, string:cname, string:fpath
30  , CLIENT_FILE_TRANSFER      , sid, string:cname, string:fpath, int:fsize, bool:isdir

31  , CLIENT_GET_CLOUDS_REQUEST     , sid

# these two args get arrays of strings filled with the cnames for a user's clouds
32  , CLIENT_GET_CLOUDS_RESPONSE    , sid, blob:owned, blob:contrib

33  , CLIENT_GET_CLOUD_HOST_REQUEST      , sid, string:cname
34  , CLIENT_GET_CLOUD_HOST_RESPONSE     , sid, string:cname, ip, int:port  , int:wsport

# These are only the hosts that have heartbeat recently
35  , GET_ACTIVE_HOSTS_REQUEST     , int:id    , string:cname
# 36 GAHRp - Manual

# note: adding the uname to this message, even though it's not used for addressing clouds yet.
#   also, the host_id is needed so the remote can prepare another host for the request,
#   but a normal client won't know the host id, or, I mean I guess they could... Should investigate todo
37  , CLIENT_MIRROR , sid   , int:host_id   , string:cloud_uname  , string:cname


38  , CLIENT_GET_CLOUD_HOSTS_REQUEST      , sid, string:cloud_uname, string:cname
# The remote fills hosts with [host.to_json for host in cloud.hosts]
39  , CLIENT_GET_CLOUD_HOSTS_RESPONSE     , sid, blob:hosts

40  , HOST_VERIFY_CLIENT_REQUEST, int:id, sid, string:cloud_uname, string:cname
41  , HOST_VERIFY_CLIENT_SUCCESS, int:id, sid, string:cloud_uname, string:cname

################################################################################
#manually updated ones:
################################################################################

###############################
# GHRp - yea just replace this ctor entirely:
#    def __init__(self, cloud=None):
#        super(GetHostsResponseMessage, self).__init__()
#        self.type = GET_HOSTS_RESPONSE
#        if cloud is not None:
#           self.cname = cloud.name
#            hosts = cloud.hosts
#            host_jsons = []
#            for host in hosts:
#                host_obj = {
#                    'ip': host.ipv6
#                    , 'port': host.port
#                    , 'wsport': host.ws_port
#                    , 'id': host.id
#                    , 'update': host.last_update
#                    , 'hndshk': host.last_handshake.isoformat()
#                    , 'hostname': host.hostname
#                }
#                host_jsons.append(host_obj)
#            self.hosts = host_jsons
16  , GET_HOSTS_RESPONSE    , string:cname  , todo:hosts

###############################
# SFRp - manually add the following:
#        self.stat = make_stat_dict(fpath)
#    and remove that arg.
#    and add from messages.util import *
21  , STAT_FILE_RESPONSE    , sid       , string:cname, string:fpath, todo:stat

###############################
# LFRp - manually add the following:
#        self.stat = make_stat_dict(fpath)
#        self.ls = make_ls_array(fpath)
#    and remove those args.
#    and add from messages.util import *
#    also, get rid of the member rel_path... see:
#        self.fpath = rel_path
#    there is no rel_path member
23  , LIST_FILES_RESPONSE   , sid       , string:cname, string:rel_path, string:fpath, todo:ls, todo:stat

###############################
# GAHRp - yea just replace this ctor entirely:
#    def __init__(self, cloud=None):
#        super(GetActiveHostsResponseMessage, self).__init__()
#        self.type = GET_ACTIVE_HOSTS_RESPONSE
#        if cloud is not None:
#           self.cname = cloud.name
#            hosts = cloud.active_hosts()
#            host_jsons = []
#            for host in hosts:
#                host_obj = {
#                    'ip': host.ipv6
#                    , 'port': host.port
#                    , 'wsport': host.ws_port
#                    , 'id': host.id
#                    , 'update': host.last_update
#                    , 'hndshk': host.last_handshake.isoformat()
#                    , 'hostname': host.hostname
#                }
#                host_jsons.append(host_obj)
#            self.hosts = host_jsons
36  , GET_ACTIVE_HOSTS_RESPONSE    , string:cname  , todo:hosts
################################################################################
# Errors
################################################################################

-1  , GENERIC_ERROR
-2  , AUTH_ERROR
-3  , UNPREPARED_HOST_ERROR
-4  , FILE_IS_DIR_ERROR
-5  , FILE_IS_NOT_DIR_ERROR
-6  , FILE_DOES_NOT_EXIST_ERROR
# todo: return an int message instead, use a resource table to translate
-7  , HOST_VERIFY_CLIENT_FAILURE, string:message
-8  , CLIENT_AUTH_ERROR, string:message
-9  , INVALID_STATE, string:message
-10 , NO_ACTIVE_HOST, string:cloud_uname, string:cname
-11 , INVALID_PERMISSIONS, string:message


# ideas for this file:
# superclasses. Let messages extend from abstract base messages.
# functional args. Look at ListFiles, etc. They require packing in a json
#     that's generated by a function. so, that doesn't work super well with this
#     method of generating.
# Constants for certain args, like cname, sid, that auto fill arg type and name
#    so if we want to change an arg a little bit, we don't need to copy-paste
#    a billion places